<?php
	// Video Game Keyboard Diagrams
	// Copyright (C) 2018  Michael Horvath
        // 
	// This file is part of Video Game Keyboard Diagrams.
        // 
	// This program is free software: you can redistribute it and/or modify
	// it under the terms of the GNU Lesser General Public License as 
	// published by the Free Software Foundation, either version 3 of the 
	// License, or (at your option) any later version.
        // 
	// This program is distributed in the hope that it will be useful, but 
	// WITHOUT ANY WARRANTY; without even the implied warranty of 
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
	// Lesser General Public License for more details.
        // 
	// You should have received a copy of the GNU Lesser General Public 
	// License along with this program.  If not, see 
	// <https://www.gnu.org/licenses/>.

	$default_game_id	= 0;
	$default_style_id	= 0;
	$default_layout_id	= 0;
	$default_format_id	= 0;
	$default_svg_bool	= 0;
	$default_ten_bool	= 1;
	$default_game_seo	= "";
	$default_game_name	= "";
	$default_style_name	= "";
	$default_layout_name	= "";
	$default_format_name	= "";
	$entities_array		= [];
	$string_title		= "";
	$string_description	= "";
	$string_keywords	= "";
	$string_legend		= "";
	$string_mouse		= "";
	$string_joystick	= "";
	$string_keyboard	= "";
	$string_note		= "";
	$string_cheat		= "";
	$string_console		= "";
	$string_emote		= "";
	$temp_game_seo		= "";
	$temp_game_name		= "";
	$temp_layout_name	= "";
	$temp_style_name	= "";
	$temp_platform_name	= "";
	$temp_format_name	= "";
	$page_separator	= "";
	$page_title_a	= "";
	$page_title_b	= "";

	function getDefaults()
	{
		selEntities();
		selDefaults();
	}
	function checkURLParameters()
	{
		global	$php_url, $svg_url, $can_url,
			$game_seo,	$default_game_seo,
			$game_id,	$default_game_id,
			$game_name,	$default_game_name,
			$style_id,	$default_style_id,
			$style_name,	$default_style_name,
			$layout_id,	$default_layout_id,
			$layout_name,	$default_layout_name,
			$format_id,	$default_format_id,
			$format_name,	$default_format_name,
			$svg_bool,	$default_svg_bool,
			$ten_bool,	$default_ten_bool;
//		error_log("checking URL query validity", 0);
		$game_seo	= array_key_exists("seo", $_GET) ? $_GET["seo"]				: null;	// generated by htaccess if missing
		$game_id	= array_key_exists("gam", $_GET) ? intval(ltrim($_GET["gam"], "0"))	: null;	// obsolete parameter kept so old links don't break
		$style_id	= array_key_exists("sty", $_GET) ? intval(ltrim($_GET["sty"], "0"))	: null;
		$layout_id	= array_key_exists("lay", $_GET) ? intval(ltrim($_GET["lay"], "0"))	: null;
		$format_id	= array_key_exists("fmt", $_GET) ? intval(ltrim($_GET["fmt"], "0"))	: null;
		$svg_bool	= array_key_exists("svg", $_GET) ? intval(ltrim($_GET["svg"], "0"))	: null;	// obsolete parameter kept so old links don't break
		$ten_bool	= array_key_exists("ten", $_GET) ? intval(ltrim($_GET["ten"], "0"))	: null;
		$fix_url	= false;
		$url_ext	= extension($_SERVER["REQUEST_URI"]);

		if ($url_ext == "svg")
		{
			if ($format_id != 1)
			{
				$fix_url = true;
			}
		}
		if ($format_id == 1)
		{
			if ($url_ext != "svg")
			{
				$fix_url = true;
			}
		}
		if ($game_id === null)
		{
//			error_log("game_id is null", 0);
			if ($game_seo !== null)
			{
				if ($url_ext == "php")
					selGamesHTML_SEO();
				else if ($url_ext == "svg")
					selGamesSVG_SEO();
			}
			else
			{
//				error_log("game_seo is null", 0);
				$game_seo = $default_game_seo;
				$game_id = $default_game_id;
				$game_name = $default_game_name;
			}
//			$fix_url = true;	// don't uncomment this!
		}
		if ($game_seo === null)
		{
//			error_log("game_seo is null", 0);
			if ($game_id !== null)
			{
				if ($code_format == "html")
					selGamesHTML_ID();
				else if ($code_format == "svg")
					selGamesSVG_ID();
			}
			else
			{
//				error_log("game_id is null", 0);
				$game_seo = $default_game_seo;
				$game_id = $default_game_id;
				$game_name = $default_game_name;
			}
			$fix_url = true;
		}
		if ($style_id === null)
		{
//			error_log("style_id is null", 0);
			$style_id = $default_style_id;
			$style_name = $default_style_name;
			$fix_url = true;
		}
		if ($layout_id === null)
		{
//			error_log("layout_id is null", 0);
			$layout_id = $default_layout_id;
			$layout_name = $default_layout_name;
			$fix_url = true;
		}
		if ($format_id === null)
		{
//			error_log("format_id is null", 0);
			if ($url_ext == "svg")
			{
				$format_id = 1;
				// what should I do here?
//				$format_name = ???;
			}
			else if ($svg_bool !== null)
			{
				$format_id = $svg_bool;
				// what should I do here?
//				$format_name = ???;
			}
			else
			{
//				error_log("svg_bool is null", 0);
				$format_id = $default_format_id;
				$format_name = $default_format_name;
				$svg_bool = $default_svg_bool;
			}
			$fix_url = true;
		}
		if ($svg_bool === null)
		{
//			error_log("svg_bool is null", 0);
			$svg_bool = $default_svg_bool;
//			$fix_url = true;	// don't uncomment this!
		}
		if ($ten_bool === null)
		{
//			error_log("ten_bool is null", 0);
			$ten_bool = $default_ten_bool;
			$fix_url = true;
		}

		$php_url = "keyboard-diagram-" . $game_seo . ".php?sty=" . $style_id . "&lay=" . $layout_id . "&fmt=" . $format_id	. "&ten=" . $ten_bool;
		$svg_url = "keyboard-diagram-" . $game_seo . ".svg?sty=" . $style_id . "&lay=" . $layout_id . "&fmt=" . 1		. "&ten=" . $ten_bool;
		$can_url = "http://isometricland.net/keyboard/" . $php_url;

		if ($fix_url === true)
		{
			if ($format_id == 1)
				header("Location: " . $svg_url);
			else
				header("Location: " . $php_url);
			die();
		}
	}
	function pageTitle()
	{
		global	$page_separator, $page_title_a, $page_title_b, $string_title,
			$temp_game_name, $temp_platform_name, $temp_layout_name, $temp_style_name, $temp_format_name, $gamesrecord_id;
		$page_separator	= " - ";
		$page_title_a	= $temp_game_name;
		$page_title_b	= $string_title . $page_separator . $temp_platform_name . $page_separator . $temp_layout_name . $page_separator . $temp_style_name . $page_separator . $temp_format_name . $page_separator . "GRID:" . $gamesrecord_id;
	}
	// there is an analogous function written in JavaScript in "keyboard-submit.js"
	// need to keep the two functions synced
	function seo_url($input)
	{
		$input = mb_convert_case($input, MB_CASE_LOWER, "UTF-8");	//convert to lowercase
		$input = str_replace(array("'", "\""), "", $input);		//remove single and double quotes
		$input = preg_replace("/[^a-zA-Z0-9]+/", "-", $input);		//replace everything non-alphanumeric with dashes
		$input = preg_replace("/\-+/", "-", $input);			//replace multiple dashes with one dash
		$input = trim($input, "-");					//trim dashes from the beginning and end of the string if any
		return $input;
	}
	function getPlatformID($in_layout_id)
	{
		global $layout_array;
		for ($i = 0; $i < count($layout_array); $i++)
		{
			// note these are local variables
			$layout_id = $layout_array[$i][0];
			$platform_id = $layout_array[$i][2];
			if ($layout_id == $in_layout_id)
			{
				return $platform_id;
			}
		}
	}
	function getLayoutName($in_layout_id)
	{
		global $layout_array;
		for ($i = 0; $i < count($layout_array); $i++)
		{
			// note these are local variables
			$layout_id = $layout_array[$i][0];
			$layout_name = $layout_array[$i][1];
			if ($layout_id == $in_layout_id)
			{
				return $layout_name;
			}
		}
	}
	function getStyleName($in_style_id)
	{
		global $style_table;
		for ($i = 0; $i < count($style_table); $i++)
		{
			$style_box = $style_table[$i];
			for ($j = 0; $j < count($style_box); $j++)
			{
				// note these are local variables
				$style_id = $style_box[$j][0];
				$style_name = $style_box[$j][1];
				if ($style_id == $in_style_id)
				{
					return $style_name;
				}
			}
		}
	}
	function getGameName($in_game_id)
	{
	}
	function getAuthorName($in_author_id)
	{
		global $author_table;
		for ($i = 0; $i < count($author_table); $i++)
		{
			// note these are local variables
			$author_id = $author_table[$i][0];
			$author_name = $author_table[$i][1];
			if ($author_id == $in_author_id)
			{
				return $author_name;
			}
		}
	}
	// maybe move this to the file that requires it, as it is very specific
	function print_key_html($in_id, $in_class, $in_color, $in_value)
	{
		echo
"								<div id=\"" . $in_id . "\" class=\"" . $in_class . "\">" . cleantextHTML($in_value) . "</div>\n";
	}
	function cleantextHTML($instring)
	{
		return str_replace("\\t","\t",str_replace("\\r","",str_replace("\\n","<br/>",str_replace("\r","",str_replace("\n","",str_replace("<","&lt;",str_replace(">","&gt;",str_replace("\"","&quot;",str_replace("'","&#39;",str_replace("&","&amp;",$instring))))))))));
	}
	function cleantextSVG($instring)
	{
		return str_replace("\\t","\t",str_replace("\\r","",str_replace("\\n","\n",str_replace("\r","",str_replace("\n","",str_replace("<","&lt;",str_replace(">","&gt;",str_replace("\"","&quot;",str_replace("'","&#39;",str_replace("&","&amp;",$instring))))))))));
	}
	function cleantextJS($instring)
	{
		return str_replace("\"","\\\"",str_replace("\\","\\\\",$instring));
	}
	function cleantextWiki($instring)
	{
		return str_replace("\\t","\t",str_replace("\\n","&lt;br/&gt;",str_replace("&","&amp;",$instring)));
	}
	function splittext($instring)
	{
		return array_filter(explode("\n", $instring));
	}
	function getkeycolor($group)
	{
		// hardcoded! should fetch from database instead
		$color_array = ["red","yel","grn","cyn","blu","mag","wht","gry","blk","org","olv","brn"];
		return array_key_exists($group-1, $color_array) ? $color_array[$group-1] : "non";
	}
	function getkeyclass($group)
	{
		// hardcoded! should fetch from database instead
		$class_array = ["cssA","cssB","cssC","cssD","cssE","cssF","cssG","cssH","cssI","cssJ","cssK","cssL"];
		return array_key_exists($group-1, $class_array) ? $class_array[$group-1] : "";

	}
	// should be made recursive so only a single procedure is required
	function leadingZeros3($innumber)
	{
		$outstring = strval($innumber);
		if ($innumber < 10)
		{
			$outstring = "0" . $outstring;
		}
		if ($innumber < 100)
		{
			$outstring = "0" . $outstring;
		}
		return $outstring;
	}
	function leadingZeros2($innumber)
	{
		$outstring = strval($innumber);
		if ($innumber < 10)
		{
			$outstring = "0" . $outstring;
		}
		return $outstring;
	}
	function getFileTime($in_file)
	{
		if (file_exists($in_file))
		{
			return "Last modified: " . date ("F d Y H:i:s.", filemtime($in_file));
		}
		else
		{
			return "Last modified: File does not exist.";
		}
	}
	// no longer used
	function sortGames()
	{
		global $genre_order_array, $genre_array, $game_array;
		array_multisort($genre_order_array, $genre_array, $game_array);
	}
	function sortGamesFront()
	{
		global $genre_array, $game_array;
		array_multisort($genre_array, SORT_ASC|SORT_NATURAL|SORT_FLAG_CASE, $game_array);
	}
	function checkForErrors()
	{
		global	$errors_table, $gamesrecord_id, $stylesrecord_id,
			$game_seo,	$temp_game_seo,
			$game_name,	$temp_game_name,	$game_id,
			$platform_name,	$temp_platform_name,	$platform_id,
			$layout_name,	$temp_layout_name,	$layout_id,
			$style_name,	$temp_style_name,	$style_id,
			$format_name,	$temp_format_name,	$format_id;
		$temp_game_seo		= $game_seo		? $game_seo		: "unrecognized-game";		// needs to be low caps
		$temp_game_name		= $game_name		? $game_name		: "Unrecognized Game";
		$temp_platform_name	= $platform_name	? $platform_name	: "Unrecognized Platform";
		$temp_layout_name	= $layout_name		? $layout_name		: "Unrecognized Layout";
		$temp_style_name	= $style_name		? $style_name		: "Unrecognized Theme";
		$temp_format_name	= $format_name		? $format_name		: "Unrecognized Format";
		// checking for $game_id or $game_name  isn't working right now
		// do we need to check for $format_id and $format_name too?
		if (!$game_name)
		{
			$errors_table[] = "Game with ID number " . $game_id . " not found.";
		}
		if (!$layout_name)
		{
			$errors_table[] = "Layout with ID number " . $layout_id . " not found.";
		}
		if (!$style_name)
		{
			$errors_table[] = "Theme with ID number " . $style_id . " not found.";
		}
		if (!$gamesrecord_id)
		{
			$errors_table[] = "No bindings found for game \"" . $temp_game_name . "\" and layout \"" . $temp_layout_name . "\".";
		}
		if (!$stylesrecord_id)
		{
			$errors_table[] = "No configurations found for theme \"" . $temp_style_name . "\" and layout \"" . $temp_layout_name . "\".";
		}
	}
?>
